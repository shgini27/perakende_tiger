/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package biz.rowana.view;

import biz.rowana.controller.DbConnection;
import biz.rowana.model.MyTable;
import java.awt.Color;
import java.awt.Image;
import java.net.URL;
import java.sql.Connection;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.NumberFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.PlainDocument;

/**
 *
 * @author Shagy
 */
public class PerakendeView extends javax.swing.JFrame {

    private NumberFormat changeFormat;

    private final String GREEN = "0xFF3300";//"0x80CC33";
    private final String RED = "0xFF0000";
    private final int SEARCH_FIELD_LIMIT = 45;

    boolean discountFlag = true;

    private static int i;

    private final Connection connection;
    private final DbConnection db;

    private final String URL_DB = "jdbc:jtds:sqlserver://localhost:1433;databaseName=Logo2";
    private final String USERNAME_DB = "sa";
    private final String PASSWORD_DB = "sb19861905";

    String invoiceTable = "LG_002_01_INVOICE";
    String itemsTable = "LG_002_ITEMS";
    String ficheTable = "LG_002_01_STFICHE";
    String clfLineTable = "LG_002_01_CLFLINE";
    String paytransTable = "LG_002_01_PAYTRANS";
    String stlineTable = "LG_002_01_STLINE";
    String unitTable = "LG_002_UNITSETL";
    String priceTable = "LG_002_PRCLIST";
    String tableNameCode = "LG_002_";
    String tableNameCode2 = "LG_002_01_";

    DecimalFormatSymbols symbols = new DecimalFormatSymbols();

    String pattern = "#######.00";
    final DecimalFormat decimalFormat = new DecimalFormat(pattern, symbols);

    boolean tfFlag1 = true;

    String[] columns = {
        "Setir No", "Haryt Kody", "Haryt Ady", "Mukdar", "Birlik", "Birlik bahasy", "Setirin summasy"
    };

    private static MyTable model;

    //test2222222 test
    /**
     * Creates new form PerakendeView
     */
    public PerakendeView() {
        db = new DbConnection(URL_DB, USERNAME_DB, PASSWORD_DB);
        connection = db.connectDatabase();
        setUpFormats();
        model = new MyTable();
        model.setColumnIdentifiers(columns);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        productPane = new javax.swing.JScrollPane();
        productTable = new javax.swing.JTable();
        totalPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        errorLabel = new javax.swing.JLabel();
        totalAmountTextField = new javax.swing.JFormattedTextField(changeFormat);
        discountPercent = new javax.swing.JFormattedTextField(changeFormat);
        totalDiscount = new javax.swing.JFormattedTextField(changeFormat);
        totalTextField = new javax.swing.JFormattedTextField(changeFormat);
        jLabel15 = new javax.swing.JLabel();
        moneyBackPanel = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        paidTextField = new javax.swing.JTextField();
        changeTextField = new javax.swing.JFormattedTextField(changeFormat);
        addressPanel = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        addressTextField = new javax.swing.JTextField();
        phoneTextField = new javax.swing.JTextField();
        emailTextField = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jCheckBox2 = new javax.swing.JCheckBox();
        ficheDetailPanel = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        ficheNoTextField = new javax.swing.JTextField();
        ficheDateTextField = new javax.swing.JTextField();
        jCheckBox1 = new javax.swing.JCheckBox();
        submitBtn = new javax.swing.JButton();
        companyLogo = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        searchTextField = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        cancelBtn = new javax.swing.JButton();
        priceBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Haryt Satma Programy");
        setIconImage(loadImageIcon());
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        productPane.setBackground(new java.awt.Color(204, 204, 204));
        productPane.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(255, 51, 0)));

        productTable.setAutoCreateRowSorter(true);
        productTable.setModel(model);
        productTable.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                productTableFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                productTableFocusLost(evt);
            }
        });
        productTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                productTableKeyPressed(evt);
            }
        });
        productPane.setViewportView(productTable);

        totalPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel1.setText("Fakturanyň jemi    :");

        jLabel2.setText("Arzanladyş             :");

        jLabel3.setText("Umumy jemi         :");

        errorLabel.setFont(new java.awt.Font("Tahoma", 2, 10)); // NOI18N
        errorLabel.setForeground(new java.awt.Color(204, 0, 51));
        errorLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        totalAmountTextField.setEditable(false);
        totalAmountTextField.setForeground(new java.awt.Color(255, 51, 0));
        totalAmountTextField.setDisabledTextColor(new java.awt.Color(255, 51, 0));
        totalAmountTextField.setEnabled(false);

        discountPercent.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                discountPercentPropertyChange(evt);
            }
        });

        totalDiscount.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                totalDiscountPropertyChange(evt);
            }
        });

        totalTextField.setEditable(false);
        totalTextField.setDisabledTextColor(new java.awt.Color(255, 51, 0));
        totalTextField.setEnabled(false);

        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(102, 102, 102));
        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel15.setText("%");

        javax.swing.GroupLayout totalPanelLayout = new javax.swing.GroupLayout(totalPanel);
        totalPanel.setLayout(totalPanelLayout);
        totalPanelLayout.setHorizontalGroup(
            totalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(totalPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(totalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(errorLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(totalPanelLayout.createSequentialGroup()
                        .addGroup(totalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(totalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(totalPanelLayout.createSequentialGroup()
                                .addComponent(discountPercent, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel15)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(totalDiscount, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(totalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(totalTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(totalAmountTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        totalPanelLayout.setVerticalGroup(
            totalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(totalPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(totalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(totalTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(totalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, totalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(discountPercent, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(totalDiscount, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(totalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(totalAmountTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(errorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        moneyBackPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel4.setText("Tölendi                  :");

        jLabel5.setText("Gaýtargy                :");

        paidTextField.setDocument(new JTextFieldLimit(SEARCH_FIELD_LIMIT));
        paidTextField.setBorder(BorderFactory.createLineBorder(Color.decode(GREEN)));
        paidTextField.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                /*try {
                    Double.parseDouble(paidTextField.getText().substring(
                        paidTextField.getText().length() - 1));
                moneyBack();
            } catch (NumberFormatException n) {
                paidTextField.setBorder(BorderFactory.createLineBorder(
                    Color.decode(RED)));
            JOptionPane.showMessageDialog(null, "San giriň!");
            SwingUtilities.invokeLater(new Runnable() {
                public void run() {
                    paidTextField.setText(
                        paidTextField.getText()
                        .substring(0, paidTextField
                            .getText().length() - 1));
                    paidTextField.setBorder(BorderFactory
                        .createLineBorder(Color.decode(GREEN)));
                }
            });
        }*/
        if(!jCheckBox1.isSelected()){
            //formatPrice();
            moneyBack();
        }
    }

    @Override
    public void removeUpdate(DocumentEvent e) {
        if(paidTextField.getText().trim().equals("")){
            tfFlag1 = true;
        }
        if(!jCheckBox1.isSelected()){
            //formatPrice();
            moneyBack();
        }
        /*if(paidTextField.getText().trim().isEmpty()){
            changeTextField.setText("");
        }*/
    }

    @Override
    public void changedUpdate(DocumentEvent e) {
        if(!jCheckBox1.isSelected()){
            //formatPrice();
            moneyBack();
        }
        /*if(paidTextField.getText().trim().isEmpty()){
            changeTextField.setText("");
        }*/
    }
    });
    paidTextField.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyPressed(java.awt.event.KeyEvent evt) {
            paidTextFieldKeyPressed(evt);
        }
    });

    changeTextField.setEditable(false);
    changeTextField.setDisabledTextColor(new java.awt.Color(255, 51, 0));
    changeTextField.setEnabled(false);

    javax.swing.GroupLayout moneyBackPanelLayout = new javax.swing.GroupLayout(moneyBackPanel);
    moneyBackPanel.setLayout(moneyBackPanelLayout);
    moneyBackPanelLayout.setHorizontalGroup(
        moneyBackPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(moneyBackPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(moneyBackPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(moneyBackPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(paidTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                .addComponent(changeTextField))
            .addContainerGap())
    );
    moneyBackPanelLayout.setVerticalGroup(
        moneyBackPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(moneyBackPanelLayout.createSequentialGroup()
            .addGap(19, 19, 19)
            .addGroup(moneyBackPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(paidTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(18, 18, 18)
            .addGroup(moneyBackPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(changeTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)))
    );

    jLabel6.setText("Salgy          :");

    jLabel7.setText("Telefon no :");

    jLabel8.setText("E-mail        :");

    addressTextField.setText("Aşgabat ş. A. Nyýazow köç. 20-nji jaý");

    phoneTextField.setText("+993 12 43 32 82,    +993 66 85 82 00");

    emailTextField.setText("kakajan@rowana.biz");

    jLabel12.setText("Iade            :");

    jCheckBox2.setText("Iade");
    jCheckBox2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jCheckBox2ActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout addressPanelLayout = new javax.swing.GroupLayout(addressPanel);
    addressPanel.setLayout(addressPanelLayout);
    addressPanelLayout.setHorizontalGroup(
        addressPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(addressPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(addressPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGap(18, 18, 18)
            .addGroup(addressPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(addressPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(addressTextField)
                    .addComponent(phoneTextField)
                    .addComponent(emailTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE))
                .addComponent(jCheckBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addContainerGap(22, Short.MAX_VALUE))
    );
    addressPanelLayout.setVerticalGroup(
        addressPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(addressPanelLayout.createSequentialGroup()
            .addGap(10, 10, 10)
            .addGroup(addressPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(addressTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
                .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(addressPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(phoneTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(addressPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(emailTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(18, 18, 18)
            .addGroup(addressPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jCheckBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addContainerGap())
    );

    jLabel9.setText("Faktura No           :");

    jLabel10.setText("Faktura senesi    :");

    jLabel11.setText("Bellik                     :");

    initFicheNo(7);
    ficheNoTextField.setEditable(false);

    Date d = new Date();
    SimpleDateFormat date = new SimpleDateFormat("yyyy-MM-dd");
    ficheDateTextField.setText(date.format(d.getTime()));
    ficheDateTextField.setEditable(false);

    jCheckBox1.setText("Nesýe");
    jCheckBox1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jCheckBox1ActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout ficheDetailPanelLayout = new javax.swing.GroupLayout(ficheDetailPanel);
    ficheDetailPanel.setLayout(ficheDetailPanelLayout);
    ficheDetailPanelLayout.setHorizontalGroup(
        ficheDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(ficheDetailPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(ficheDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGap(18, 18, 18)
            .addGroup(ficheDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(ficheDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(ficheDateTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                    .addComponent(ficheNoTextField, javax.swing.GroupLayout.Alignment.LEADING))
                .addComponent(jCheckBox1))
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    ficheDetailPanelLayout.setVerticalGroup(
        ficheDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(ficheDetailPanelLayout.createSequentialGroup()
            .addGap(10, 10, 10)
            .addGroup(ficheDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(ficheNoTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE))
            .addGap(18, 18, 18)
            .addGroup(ficheDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(ficheDateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
            .addGroup(ficheDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jCheckBox1))
            .addGap(10, 10, 10))
    );

    submitBtn.setText("Harydy Sat");
    submitBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    submitBtn.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            submitBtnActionPerformed(evt);
        }
    });

    companyLogo.setFont(new java.awt.Font("MingLiU_HKSCS-ExtB", 1, 36)); // NOI18N
    companyLogo.setForeground(new java.awt.Color(255, 102, 0));
    companyLogo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    companyLogo.setText("ROWANA");

    jLabel13.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
    jLabel13.setForeground(new java.awt.Color(255, 51, 0));
    jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel13.setText("SÖWDAŇYZ ÜÇIN KÖP SAG BOLUŇ!");

    searchTextField.setDocument(new JTextFieldLimit(SEARCH_FIELD_LIMIT));
    searchTextField.setBorder(BorderFactory.createLineBorder(Color.decode(GREEN)));
    searchTextField.getDocument().addDocumentListener(new DocumentListener() {
        @Override
        public void insertUpdate(DocumentEvent e) {

            if (searchByOne()) {
                System.out.print("text barlayan: " + searchTextField.getText().trim());
                searchTextField.setBorder(BorderFactory.createLineBorder(
                    Color.decode(RED)));
            SwingUtilities.invokeLater(() -> {
                searchTextField.setText("");
                searchTextField.setBorder(BorderFactory
                    .createLineBorder(Color.decode(GREEN)));
            });
        }
    }

    @Override
    public void removeUpdate(DocumentEvent e) {
        //searchByOne();
    }

    @Override
    public void changedUpdate(DocumentEvent e) {
        //searchByOne();
    }
    });
    searchTextField.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    searchTextField.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyPressed(java.awt.event.KeyEvent evt) {
            searchTextFieldKeyPressed(evt);
        }
        public void keyTyped(java.awt.event.KeyEvent evt) {
            searchTextFieldKeyTyped(evt);
        }
    });

    jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
    jLabel14.setText("Haryt Gözle :");

    cancelBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/biz/rowana/view/Trash.png"))); // NOI18N
    cancelBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    cancelBtn.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            cancelBtnActionPerformed(evt);
        }
    });

    priceBtn.setText("Baha Gör");
    priceBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    priceBtn.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            priceBtnActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(productPane)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(addressPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(18, 18, 18)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(priceBtn)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(companyLogo, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGap(18, 18, 18)
                    .addComponent(ficheDetailPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE))
                .addGroup(layout.createSequentialGroup()
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 800, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(totalPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(moneyBackPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(submitBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cancelBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))))
            .addContainerGap())
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(addressPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(ficheDetailPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createSequentialGroup()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(companyLogo, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(priceBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(18, 18, 18)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(searchTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
                        .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(productPane, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(totalPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(moneyBackPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(submitBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(cancelBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addContainerGap(33, Short.MAX_VALUE))
    );

    pack();
    }// </editor-fold>//GEN-END:initComponents

    private void submitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitBtnActionPerformed
        if (productTable.getRowCount() > 0 && discountFlag) {
            submitData(productTable.getRowCount());
            model = (MyTable) productTable.getModel();
            for (int x = productTable.getRowCount() - 1; x > -1; x--) {
                model.removeRow(x);
            }
            i = 0;
            searchTextField.setText("");
            totalAmountTextField.setText("");
            totalDiscount.setText("");
            totalTextField.setText("");
            discountPercent.setText("");
            ficheNoTextField.setText("");
            ficheDateTextField.setText("");
            if (jCheckBox1.isSelected()) {
                jLabel4.setText("Tölendi                  :");
                jLabel5.setText("Gaýtargy                :");
                paidTextField.setText("");
                jCheckBox1.setSelected(false);
                changeTextField.setEnabled(true);
            }
            if (jCheckBox2.isSelected()) {
                jCheckBox2.setSelected(false);
            }
            initFicheNo(7);
            Date d = new Date();
            SimpleDateFormat date = new SimpleDateFormat("yyyy-MM-dd");
            ficheDateTextField.setText(date.format(d.getTime()));
            searchTextField.requestFocus();
            errorLabel.setText("");
        } else {
            errorLabel.setText("Arzanladyş mukdaryny azaldyň ýa da haryt seçiň!");
        }
    }//GEN-LAST:event_submitBtnActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        if (jCheckBox1.isSelected()) {
            System.out.println("Selected");
            jLabel4.setText("Açyklama               :");
            jLabel5.setText("");
            paidTextField.setText("");
            changeTextField.setText("");
            changeTextField.setEnabled(false);
        } else {
            System.out.println("NOT Selected");
            jLabel4.setText("Tölendi                  :");
            jLabel5.setText("Gaýtargy                :");
            paidTextField.setText("");
            changeTextField.setEnabled(true);
        }
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void searchTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchTextFieldKeyPressed
        System.err.println("pressed keyCode: " + evt.getKeyCode());
        if (evt.getKeyCode() == 112) {//F1
            new ProductSearchView(connection).setVisible(true);
        }
        if (evt.getKeyCode() == 113) {//F2
            PriceWindow prcWin = new PriceWindow(connection);
            prcWin.setVisible(true);
        }
        if (evt.getKeyCode() == 114) {//F3
            discountPercent.requestFocus();
        }
        if (evt.getKeyCode() == 115) {//F4
            paidTextField.requestFocus();
        }
        if (evt.getKeyCode() == 122) {//F11 nesye
            if (jCheckBox1.isSelected()) {
                jCheckBox1.setSelected(false);
                jLabel4.setText("Tölendi                  :");
                jLabel5.setText("Gaýtargy                :");
                paidTextField.setText("");
                changeTextField.setEnabled(true);
            } else {
                jCheckBox1.setSelected(true);
                System.out.println("Selected");
                jLabel4.setText("Açyklama               :");
                jLabel5.setText("");
                paidTextField.setText("");
                changeTextField.setText("");
                changeTextField.setEnabled(false);
            }
        }
        if (evt.getKeyCode() == 123) {//F12 iade
            if (jCheckBox2.isSelected()) {
                System.out.println("Selected");
                jCheckBox2.setSelected(false);
                initFicheNo(7);
            } else {
                System.out.println("NOT Selected");
                jCheckBox2.setSelected(true);
                initFicheNo(2);
            }
        }
        if (evt.getKeyCode() == 127) {//Delete
            if (productTable.getRowCount() > 0 || !totalTextField.getText().trim().isEmpty()
                    || !paidTextField.getText().trim().isEmpty()) {
                model = (MyTable) productTable.getModel();
                for (int x = productTable.getRowCount() - 1; x > -1; x--) {
                    model.removeRow(x);
                }
                i = 0;
                searchTextField.setText("");
                totalAmountTextField.setText("");
                totalDiscount.setText("");
                totalTextField.setText("");
                discountPercent.setText("");
                ficheDateTextField.setText("");

                Date d = new Date();
                SimpleDateFormat date = new SimpleDateFormat("yyyy-MM-dd");
                ficheDateTextField.setText(date.format(d.getTime()));
            }
            if (jCheckBox1.isSelected()) {
                jLabel4.setText("Tölendi                  :");
                jLabel5.setText("Gaýtargy                :");
                paidTextField.setText("");
                changeTextField.setEnabled(true);
                jCheckBox1.setSelected(false);
            }
            if (jCheckBox2.isSelected()) {
                jCheckBox2.setSelected(false);
                initFicheNo(7);
            }
            errorLabel.setText("");
        }
    }//GEN-LAST:event_searchTextFieldKeyPressed

    private void searchTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchTextFieldKeyTyped

    }//GEN-LAST:event_searchTextFieldKeyTyped

    private void productTableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_productTableKeyPressed
        System.err.println("pressed keyCode: " + evt.getKeyCode());
        if (evt.getKeyCode() == 127) {
            deleteProduct();
        }

        if (evt.getKeyCode() == 10) {
            searchTextField.requestFocus();
            System.err.println("focus na text");
        }
    }//GEN-LAST:event_productTableKeyPressed

    private void cancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBtnActionPerformed
        if (productTable.getRowCount() > 0 || !totalTextField.getText().trim().isEmpty()
                || !paidTextField.getText().trim().isEmpty()) {
            model = (MyTable) productTable.getModel();
            for (int x = productTable.getRowCount() - 1; x > -1; x--) {
                model.removeRow(x);
            }
            i = 0;
            searchTextField.setText("");
            totalAmountTextField.setText("");
            totalDiscount.setText("");
            totalTextField.setText("");
            discountPercent.setText("");
            ficheDateTextField.setText("");
            if (jCheckBox1.isSelected()) {
                System.out.println("NOT Selected");
                jLabel4.setText("Tölendi                  :");
                jLabel5.setText("Gaýtargy                :");
                paidTextField.setText("");
                changeTextField.setEnabled(true);
                jCheckBox1.setSelected(false);
            }
            Date d = new Date();
            SimpleDateFormat date = new SimpleDateFormat("yyyy-MM-dd");
            ficheDateTextField.setText(date.format(d.getTime()));
        }
        errorLabel.setText("");
        searchTextField.requestFocus();
    }//GEN-LAST:event_cancelBtnActionPerformed

    private void priceBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_priceBtnActionPerformed
        PriceWindow prcWin = new PriceWindow(connection);
        prcWin.setVisible(true);
    }//GEN-LAST:event_priceBtnActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        searchTextField.requestFocus();
    }//GEN-LAST:event_formWindowActivated

    private void discountPercentPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_discountPercentPropertyChange
        addDiscount();
    }//GEN-LAST:event_discountPercentPropertyChange

    private void totalDiscountPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_totalDiscountPropertyChange
        addDiscountTmm();
    }//GEN-LAST:event_totalDiscountPropertyChange

    private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox2ActionPerformed
        if (jCheckBox2.isSelected()) {
            System.out.println("Selected");
            initFicheNo(2);
        } else {
            System.out.println("NOT Selected");
            initFicheNo(7);
        }
    }//GEN-LAST:event_jCheckBox2ActionPerformed

    private void productTableFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_productTableFocusGained
        addAmnt();
    }//GEN-LAST:event_productTableFocusGained

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        System.err.println("evt key:" + evt.getKeyCode());
        if (evt.getKeyCode() == 113) {
            System.err.println("evt keyInside if:" + evt.getKeyCode());
            PriceWindow prcWin = new PriceWindow(connection);
            prcWin.setVisible(true);
        }
    }//GEN-LAST:event_formKeyPressed

    private void paidTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_paidTextFieldKeyPressed
        if (evt.getKeyCode() == 127) {//delete deletes all
            if (productTable.getRowCount() > 0 || !totalTextField.getText().trim().isEmpty()
                    || !paidTextField.getText().trim().isEmpty()) {
                model = (MyTable) productTable.getModel();
                for (int x = productTable.getRowCount() - 1; x > -1; x--) {
                    model.removeRow(x);
                }
                i = 0;
                searchTextField.setText("");
                totalAmountTextField.setText("");
                totalDiscount.setText("");
                totalTextField.setText("");
                discountPercent.setText("");
                changeTextField.setText("");
                ficheDateTextField.setText("");

                Date d = new Date();
                SimpleDateFormat date = new SimpleDateFormat("yyyy-MM-dd");
                ficheDateTextField.setText(date.format(d.getTime()));
                paidTextField.setText("");
                searchTextField.requestFocus();
            }
            if (jCheckBox1.isSelected()) {
                jLabel4.setText("Tölendi                  :");
                jLabel5.setText("Gaýtargy                :");
                paidTextField.setText("");
                changeTextField.setEnabled(true);
                jCheckBox1.setSelected(false);
            }
            if (jCheckBox2.isSelected()) {
                jCheckBox2.setSelected(false);
                initFicheNo(7);
            }
            errorLabel.setText("");
        }

        if (evt.getKeyCode() == 10) {//Enter
            if (productTable.getRowCount() > 0 && discountFlag) {
                submitData(productTable.getRowCount());
                model = (MyTable) productTable.getModel();
                for (int x = productTable.getRowCount() - 1; x > -1; x--) {
                    model.removeRow(x);
                }
                i = 0;
                searchTextField.setText("");
                totalAmountTextField.setText("");
                totalDiscount.setText("");
                totalTextField.setText("");
                discountPercent.setText("");
                ficheNoTextField.setText("");
                ficheDateTextField.setText("");
                if (jCheckBox1.isSelected()) {
                    jLabel4.setText("Tölendi                  :");
                    jLabel5.setText("Gaýtargy                :");
                    paidTextField.setText("");
                    jCheckBox1.setSelected(false);
                    changeTextField.setEnabled(true);
                }
                if (jCheckBox2.isSelected()) {
                    jCheckBox2.setSelected(false);
                }
                initFicheNo(7);
                Date d = new Date();
                SimpleDateFormat date = new SimpleDateFormat("yyyy-MM-dd");
                ficheDateTextField.setText(date.format(d.getTime()));
                searchTextField.requestFocus();
                errorLabel.setText("");
            } else {
                errorLabel.setText("Arzanladyş mukdaryny azaldyň ýa da haryt seçiň!");
                searchTextField.requestFocus();
            }
        }
    }//GEN-LAST:event_paidTextFieldKeyPressed

    private void productTableFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_productTableFocusLost
        System.err.println("lost focus");
    }//GEN-LAST:event_productTableFocusLost

    //add more amount method
    public void addAmnt() {
        if (productTable.getSelectedColumn() == 3) {
            Double price = Double.valueOf(productTable.getValueAt(productTable.getSelectedRow(), 5).toString());
            Double amount = Double.valueOf(productTable.getValueAt(productTable.getSelectedRow(),
                    productTable.getSelectedColumn()).toString());
            System.err.println("value: " + amount);
            productTable.setValueAt(String.format("%.2f", (price * amount)), productTable.getSelectedRow(), 6);

            if (!discountPercent.getText().trim().isEmpty()) {
                discountPercent.setText("");
                totalDiscount.setText("");
            }
            if (!paidTextField.getText().trim().isEmpty()) {
                paidTextField.setText("");
                changeTextField.setText("");
            }
            Double totalText = 0.0;
            for (int b = 0; b < productTable.getRowCount(); b++) {
                totalText = totalText + Double.valueOf(productTable.getValueAt(b, 6).toString());
            }
            totalTextField.setText(String.format("%.2f", (totalText)));
            totalAmountTextField.setText(String.format("%.2f", (totalText)));
        }

    }

    /**
     * Method to get products from database.
     *
     * @param connection connection to database.
     * @param productName product name to be searched from database.
     */
    private boolean searchByOne() {
        textFlag = false;
        if(searchTextField.getText().endsWith("\n")){
            System.err.println("uraaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!");
        }
        System.err.println("barlayaaan!");
        if(searchTextField.getText().startsWith("*")){
            System.err.println("uraaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!");
        }
        if (!searchTextField.getText().equals("")) {
            String[] product;
            Double amount;
            String unit;
            Double price;
            Double totalPrice;
            boolean flag = true;

            product = db.getProductByBarcode(connection, tableNameCode, searchTextField.getText().trim());
            if (!product[0].equals("-1") && !product[1].equals("-1")) {
                System.err.println("Barkod urun: " + product[0] + "\nAdy: " + product[1]);

                if (productTable.getRowCount() > 0) {
                    for (int a = 0; a < productTable.getRowCount(); a++) {
                        if (productTable.getValueAt(a, 2).equals(product[1])) {
                            Double amountUpdate = Double.valueOf(productTable.getValueAt(a, 3).toString()) + 1.00;
                            productTable.setValueAt(amountUpdate, a, 3);
                            productTable.setValueAt((Double.valueOf(productTable
                                    .getValueAt(a, 5).toString()) * amountUpdate), a, 6);
                            textFlag = true;
                            flag = false;
                        }
                    }
                    if (flag) {
                        amount = 1.00;
                        unit = db.getUnit(connection, tableNameCode, product[1]);
                        price = db.getPrice(connection, tableNameCode, product[1]);
                        totalPrice = amount * price;

                        Object[] row = {++i, product[0], product[1], amount, unit, price,
                            String.format("%.2f", (totalPrice))};

                        model = (MyTable) productTable.getModel();
                        model.addRow(row);
                        textFlag = true;
                    }
                } else {
                    amount = 1.00;
                    unit = db.getUnit(connection, tableNameCode, product[1]);
                    price = db.getPrice(connection, tableNameCode, product[1]);
                    totalPrice = amount * price;

                    Object[] row = {++i, product[0], product[1], amount, unit, price, price,
                        String.format("%.2f", (totalPrice))};

                    model = (MyTable) productTable.getModel();
                    model.addRow(row);
                    textFlag = true;
                }
                
                Double totalText = 0.0;
                for (int b = 0; b < productTable.getRowCount(); b++) {
                    totalText = totalText + Double.valueOf(productTable.getValueAt(b, 6).toString());
                }
                
                totalTextField.setText(String.format("%.2f", (totalText)));
                totalAmountTextField.setText(String.format("%.2f", (totalText)));
                discountPercent.setText("");
                totalDiscount.setText("");
            }
        }
        return textFlag;
    }

    /*SELECT CODE, NAME FROM LG_002_ITEMS 
	WHERE LOGICALREF = (SELECT LOGICALREF FROM LG_002_UNITBARCODE WHERE BARCODE = 'KM33333')*/
    //method to init table from other window
    public static void addProduct(String productCode, String productName, Double amount,
            String unit, Double price, Double totalPrice) {

        boolean flag = true;
        for (int a = 0; a < productTable.getRowCount(); a++) {
            if (productTable.getValueAt(a, 2).equals(productName)) {
                Double amountUpdate = Double.valueOf(productTable.getValueAt(a, 3).toString()) + 1.00;
                productTable.setValueAt(amountUpdate, a, 3);
                Double total = (Double.valueOf(productTable.getValueAt(a, 5).toString()) * amountUpdate);
                productTable.setValueAt(String.format("%.2f", (total)), a, 6);
                flag = false;
            }
        }
        if (flag) {
            Double total = amount * price;
            Object[] row = {++i, productCode, productName, amount, unit, price, String.format("%.2f", (total))};

            model = (MyTable) productTable.getModel();
            model.addRow(row);
        }
        Double totalText = 0.00;
        for (int b = 0; b < productTable.getRowCount(); b++) {
            totalText = totalText + Double.valueOf(productTable.getValueAt(b, 6).toString());
        }
        System.err.println("total: " + String.format("%.2f", (totalText)));
        totalTextField.setText(String.format("%.2f", (totalText)));
        totalAmountTextField.setText(String.format("%.2f", (totalText)));
    }

    //method to dekete product from table
    private void deleteProduct() {
        int[] rows = productTable.getSelectedRows();
        for (int x = productTable.getSelectedRowCount() - 1; x > -1; x--) {

            Double amnt = Double.valueOf(productTable.getValueAt(rows[x], 3).toString());

            if (amnt > 1.0) {
                
                Double total = Double.valueOf(productTable.getValueAt(rows[x], 6).toString());
                Double price = Double.valueOf(productTable.getValueAt(rows[x], 5).toString());
                
                Double textTotal = total - price;
                Double totalField = Double.valueOf(totalTextField.getText().trim()) - price;
                Double totAmnt = Double.valueOf(totalAmountTextField.getText().trim()) - price;
                
                productTable.setValueAt((amnt - 1.0), rows[x], 3);
                productTable.setValueAt(String.format("%.2f", (textTotal)), rows[x], 6);
                
                totalTextField.setText(String.format("%.2f", (totalField)));
                totalAmountTextField.setText(String.format("%.2f", (totAmnt)));
            } else {
                
                Double total = Double.valueOf(productTable.getValueAt(rows[x], 6).toString());
                model.removeRow(rows[x]);
                Double textTotal = Double.valueOf(totalTextField.getText().trim()) - total;
                totalTextField.setText(String.format("%.2f", (textTotal)));
                Double totAmnt = Double.valueOf(totalAmountTextField.getText().trim()) - total;
                totalAmountTextField.setText(String.format("%.2f", (totAmnt)));
            }

            searchTextField.setText("");
        }

        int row = 0;
        for (int x = 0; x < productTable.getRowCount(); x++) {
            productTable.setValueAt(++row, x, 0);
            i--;
        }

        if (productTable.getRowCount() <= 0) {
            i = 0;
            totalAmountTextField.setText("");
            totalDiscount.setText("");
            totalTextField.setText("");
            discountPercent.setText("");
            errorLabel.setText("");
            jCheckBox1.setSelected(false);
            jCheckBox2.setSelected(false);
        }
        searchTextField.requestFocus();
    }

    //add discount to the product
    private void addDiscount() {
        Double total;
        Double percent = 0.0;
        Double discount;
        Double totalAmount;

        if (!totalTextField.getText().trim().isEmpty() && !discountPercent.getText().trim().isEmpty()) {
            //percent = Double.valueOf(discountPercent.getText().trim());
            try {
                percent = changeFormat.parse(discountPercent.getText()).doubleValue();
            } catch (ParseException pe) {
                discountPercent.setText("");
                System.err.println("san gir!!!");
                //pe.printStackTrace();
            }
            //percent = ((Number) discountPercent.getValue()).doubleValue();
            if (percent > 5.0) {
                errorLabel.setText("Arzanladyşy 5%'dan ýokary girdiňiz!");
                discountFlag = false;
            } else {
                errorLabel.setText("");
                discountFlag = true;
            }
            total = Double.valueOf(totalTextField.getText().trim());
            discount = (total * percent) / 100;//percent = changeFormat.parse(discountPercent.getText()).doubleValue();
            totalAmount = total - discount;

            totalDiscount.setText(String.format("%.2f", discount));
            totalAmountTextField.setText(String.format("%.2f", totalAmount));
        }
    }

    private void addDiscountTmm() {
        Double total;
        Double discount = 0.0;
        Double totalAmount;
        Double percent;

        //discountPercent.setEditable(false);
        if (!totalTextField.getText().trim().isEmpty() && !totalDiscount.getText().trim().isEmpty()) {
            //discount = Double.valueOf(totalDiscount.getText());
            total = Double.valueOf(totalTextField.getText().trim());
            try {
                discount = changeFormat.parse(totalDiscount.getText()).doubleValue();
            } catch (ParseException pe) {
                totalDiscount.setText("");
                //pe.printStackTrace();
            }

            //percent = (5.0 * total)/100;
            percent = (discount * 100) / total;
            if (percent > 5) {
                String prt = String.format("%.2f", percent);
                errorLabel.setText("Arzanladyşy " + prt + "%'dan ýokary girdiňiz!");
                discountFlag = false;
            } else {
                errorLabel.setText("");
                discountFlag = true;
            }

            totalAmount = total - discount;

            totalAmountTextField.setText(String.format("%.2f", totalAmount));
        }
    }

    private void moneyBack() {
        Double totalAmount;
        Double paidAmount;
        Double moneyBack;

        if (!totalAmountTextField.getText().trim().isEmpty() && !paidTextField.getText().trim().isEmpty()) {
            totalAmount = Double.valueOf(totalAmountTextField.getText().trim());
            //paidAmount = Double.valueOf(paidTextField.getText());
            
            
            try {
                paidAmount = changeFormat.parse(paidTextField.getText().trim()).doubleValue();
                
                System.err.println("paid amnt: " +paidAmount);
                moneyBack = paidAmount - totalAmount;
                System.err.println("paid amnt: " +moneyBack);
                
                changeTextField.setText(String.format("%.2f", moneyBack));
            } catch (ParseException pe) {
                System.err.println("san gir!!!");
                JOptionPane.showMessageDialog(null, "San girmeli!");
                SwingUtilities.invokeLater(() -> {
                    paidTextField.setText(paidTextField.getText().substring(0, paidTextField.getText().length() - 1));
                });
                //pe.printStackTrace();
            }
            //moneyBack = paidAmount - totalAmount;

            //changeTextField.setText(String.format("%.2f", moneyBack));//km333334
        }
    }

    //method to init the ficheNo text field
    private void initFicheNo(int trcode) {
        int w = db.getInt(db.getFicheNo(connection, tableNameCode2, "MAG", trcode));
        NumberFormat nf = new DecimalFormat("0000000000000");

        System.out.println("oldFicheNo: " + db.getFicheNo(connection,
                tableNameCode2, "MAG", trcode) + "\nficheNo: " + "MAG" + nf.format(w + 1));
        ficheNoTextField.setText("MAG" + nf.format(w + 1));
    }

    //submit data to database
    private void submitData(int rowCount) {
        System.err.println("rowCount: " + rowCount);
        Double totDisc = 0.00;
        String submitDate;
        Double percent = 0.00;
        Double total;
        Double totalAmount;
        int trcode = 7;
        int ficheLogicalRef;
        int invoiceLogicalRef;
        int stLineLogRef;
        int clientRef = 4;//initilize with real client ref (cash)
        String ficheNo = ficheNoTextField.getText().trim();
        String borrower = " ";

        if (jCheckBox1.isSelected()) {
            borrower = paidTextField.getText().trim();
        }
        if (!totalDiscount.getText().trim().isEmpty()) {
            totDisc = Double.valueOf(totalDiscount.getText().trim());
        }

        if (!discountPercent.getText().trim().isEmpty()) {
            percent = Double.valueOf(discountPercent.getText());
        }

        if (jCheckBox1.isSelected()) {
            clientRef = 3;//initilize with real client ref (nesye)
        }
        if (jCheckBox2.isSelected()) {
            trcode = 2;
        }

        total = Double.valueOf(totalTextField.getText().trim());
        totalAmount = Double.valueOf(totalAmountTextField.getText().trim());

        Date d = new Date();
        SimpleDateFormat date = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS");
        submitDate = date.format(d.getTime());

        //insert invoice data
        invoiceLogicalRef = (db.getLogicalRef(connection, invoiceTable + "SEQ", "1", "LASTLREF", "ID") + 1);
        db.insertInvoice(connection, invoiceTable, String.valueOf(invoiceLogicalRef), clientRef, ficheNo, submitDate,
                totDisc, String.valueOf(total), String.valueOf(totalAmount), trcode, borrower);

        if (db.getLogicalRef(connection, invoiceTable, String.valueOf(invoiceLogicalRef),
                "LOGICALREF", "LOGICALREF") == invoiceLogicalRef) {
            db.updateKey(connection, invoiceLogicalRef, invoiceTable + "SEQ");

            //insert stfiche data
            ficheLogicalRef = (db.getLogicalRef(connection, ficheTable + "SEQ", "1", "LASTLREF", "ID") + 1);
            db.insertFiche(connection, ficheTable, String.valueOf(ficheLogicalRef), ficheNo, submitDate, total, totalAmount,
                    String.valueOf(invoiceLogicalRef), clientRef, trcode);
            if (db.getLogicalRef(connection, ficheTable, String.valueOf(ficheLogicalRef),
                    "LOGICALREF", "LOGICALREF") == ficheLogicalRef) {
                db.updateKey(connection, ficheLogicalRef, ficheTable + "SEQ");

                //insert CLFLINE
                int clfLineLogRef = (db.getLogicalRef(connection, clfLineTable + "SEQ", "1", "LASTLREF", "ID") + 1);
                db.insertClfLine(connection, clfLineTable, clfLineLogRef, invoiceLogicalRef, clientRef,
                        ficheNo, totalAmount, trcode, submitDate);
                if (db.getLogicalRef(connection, clfLineTable, String.valueOf(clfLineLogRef),
                        "LOGICALREF", "LOGICALREF") == clfLineLogRef) {
                    db.updateKey(connection, clfLineLogRef, clfLineTable + "SEQ");
                }

                int paytransLogRef = (db.getLogicalRef(connection, paytransTable + "SEQ", "1", "LASTLREF", "ID") + 1);
                db.insertPaytrans(connection, paytransTable, paytransLogRef, ficheLogicalRef,
                        clientRef, trcode, totalAmount, submitDate);
                if (db.getLogicalRef(connection, paytransTable, String.valueOf(paytransLogRef),
                        "LOGICALREF", "LOGICALREF") == paytransLogRef) {
                    db.updateKey(connection, paytransLogRef, paytransTable + "SEQ");
                }

                //insert stline data
                for (int x = 0; x < rowCount; x++) {
                    int itemRef = db.getLogicalRef(connection, itemsTable,
                            productTable.getValueAt(x, 1).toString(), "LOGICALREF", "CODE");
                    int uomRef = db.getLogicalRef(connection, unitTable,
                            productTable.getValueAt(x, 4).toString(), "LOGICALREF", "CODE");
                    int usRef = db.getLogicalRef(connection, unitTable,
                            productTable.getValueAt(x, 4).toString(), "UNITSETREF", "CODE");
                    int priceLog = db.getPriceLogRef(connection, tableNameCode, productTable.getValueAt(x, 2).toString());

                    Double amnt = Double.valueOf(productTable.getValueAt(x, 3).toString());
                    Double prc = Double.valueOf(productTable.getValueAt(x, 5).toString());
                    //Double sumTotal = Double.valueOf(productTable.getValueAt(x, 6).toString());

                    int rowNumber = (int) productTable.getValueAt(x, 0);

                    stLineLogRef = (db.getLogicalRef(connection, stlineTable + "SEQ", "1", "LASTLREF", "ID") + 1);
                    db.insertStLine(connection, stlineTable, stLineLogRef, clientRef, ficheLogicalRef,
                            itemRef, uomRef, usRef, invoiceLogicalRef, amnt, priceLog, prc, percent,
                            totDisc, total, rowNumber, trcode, submitDate);
                    if (db.getLogicalRef(connection, stlineTable, String.valueOf(stLineLogRef),
                            "LOGICALREF", "LOGICALREF") == stLineLogRef) {
                        db.updateKey(connection, stLineLogRef, stlineTable + "SEQ");
                    }
                }

                int itemRef = 0;
                int uomRef = 0;
                int usRef = 0;
                Double amnt = 0.00;
                Double prc = 0.00;

                stLineLogRef = (db.getLogicalRef(connection, stlineTable + "SEQ", "1", "LASTLREF", "ID") + 1);
                db.insertStLine(connection, stlineTable, stLineLogRef, clientRef, ficheLogicalRef,
                        itemRef, uomRef, usRef, 0, amnt, 0, prc, percent, totDisc, 0.0,
                        (rowCount + 1), trcode, submitDate);

                if (db.getLogicalRef(connection, stlineTable, String.valueOf(stLineLogRef),
                        "LOGICALREF", "LOGICALREF") == stLineLogRef) {
                    db.updateKey(connection, stLineLogRef, stlineTable + "SEQ");
                }

                stLineLogRef = (db.getLogicalRef(connection, stlineTable + "SEQ", "1", "LASTLREF", "ID") + 1);
                db.insertStLine(connection, stlineTable, stLineLogRef, clientRef, 0, itemRef, uomRef,
                        usRef, invoiceLogicalRef, amnt, 0, prc, percent, totDisc, 0.0,
                        (rowCount + 1), trcode, submitDate);

                if (db.getLogicalRef(connection, stlineTable, String.valueOf(stLineLogRef),
                        "LOGICALREF", "LOGICALREF") == stLineLogRef) {
                    db.updateKey(connection, stLineLogRef, stlineTable + "SEQ");
                }
            }
        }
    }

    /*
    //price formating method
    public void formatPrice() {
        symbols.setGroupingSeparator(',');
        symbols.setDecimalSeparator('.');
        decimalFormat.setParseBigDecimal(true);
        try {
            BigDecimal paid = (BigDecimal) decimalFormat.parse(paidTextField
                    .getText().substring(paidTextField.getText().length() - 1));
            BigDecimal paid;

            paidTextField.setBorder(BorderFactory.createLineBorder(Color.decode(GREEN)));
            moneyBackPanel.repaint();
            paid = (BigDecimal) decimalFormat.parse(paidTextField.getText());
            moneyBack();
            System.out.println("paid2: " + paid);

        } catch (NumberFormatException | ParseException ex) {
            System.err.println("contains: " + paidTextField.getText().substring(0,
                    paidTextField.getText().length() - 1).contains("."));

            if (paidTextField.getText().substring(0,
                    paidTextField.getText().length() - 1).contains(".") && tfFlag1) {

                JOptionPane.showMessageDialog(null, "You have one decimal separator already");
                SwingUtilities.invokeLater(() -> {
                    paidTextField.setText(paidTextField.getText().substring(0, paidTextField.getText().length() - 1));
                });
                ex.printStackTrace();
                paidTextField.setBorder(BorderFactory.createLineBorder(Color.decode(GREEN)));
                tfFlag1 = false;

            } else {

                JOptionPane.showMessageDialog(null, "Price must be a number!");
                SwingUtilities.invokeLater(() -> {
                    paidTextField.setText(paidTextField.getText().substring(0, paidTextField.getText().length() - 1));
                });
            }
        }
    }
*/
    /**
     * Method to set icon.
     */
    private Image loadImageIcon() {
        URL location = getClass().getResource("cash_register.png");
        //System.err.println("location: " + location2);
        /*OUTPUT:
        file:/C:/Users/Shagy/Documents/NetBeansProjects/BarcodeGenerator/build/
        classes/com/shagy/barcodegenerator/view/BarcodeView.class
         */
        //String location = "icons\\barcode_24.png";
        ImageIcon image = new ImageIcon(location);
        return image.getImage();
    }

    //Create and set up number formats. These objects also
    //parse numbers input by user.
    private void setUpFormats() {
        //totalAmountFormat = NumberFormat.getNumberInstance();
        //totalFormat = NumberFormat.getNumberInstance();
        changeFormat = NumberFormat.getNumberInstance();
        changeFormat.setMinimumFractionDigits(2);

        //percentFormat = NumberFormat.getNumberInstance();
        //percentFormat.setMinimumFractionDigits(2);
        //paymentFormat = NumberFormat.getCurrencyInstance();
    }

    /*---------------------------INSERT DATA----------------------------------*/
    /**
     * Class to give the limit for textFiled.
     *
     * @param limit the textFieldLimit.
     */
    private class JTextFieldLimit extends PlainDocument {

        private final int limit;

        JTextFieldLimit(int limit) {
            super();
            this.limit = limit;
        }

        @Override
        public void insertString(int offset, String str, AttributeSet attr)
                throws BadLocationException {

            if (str == null) {
                return;
            }

            if ((getLength() + str.length()) <= limit) {
                super.insertString(offset, str, attr);
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PerakendeView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new PerakendeView().setVisible(true);
        });
    }

    private boolean textFlag;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel addressPanel;
    private javax.swing.JTextField addressTextField;
    private javax.swing.JButton cancelBtn;
    private javax.swing.JFormattedTextField changeTextField;
    private javax.swing.JLabel companyLogo;
    private javax.swing.JFormattedTextField discountPercent;
    private javax.swing.JTextField emailTextField;
    private javax.swing.JLabel errorLabel;
    private javax.swing.JTextField ficheDateTextField;
    private javax.swing.JPanel ficheDetailPanel;
    private javax.swing.JTextField ficheNoTextField;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel moneyBackPanel;
    private javax.swing.JTextField paidTextField;
    private javax.swing.JTextField phoneTextField;
    private javax.swing.JButton priceBtn;
    private javax.swing.JScrollPane productPane;
    private static javax.swing.JTable productTable;
    private javax.swing.JTextField searchTextField;
    private javax.swing.JButton submitBtn;
    private static javax.swing.JFormattedTextField totalAmountTextField;
    private javax.swing.JFormattedTextField totalDiscount;
    private javax.swing.JPanel totalPanel;
    private static javax.swing.JFormattedTextField totalTextField;
    // End of variables declaration//GEN-END:variables
}
